AWSTemplateFormatVersion: "2010-09-09"
Description: "Transcribe audio file to text"
Parameters:
  BucketName:
    Type: String
    Default: transcribe-storage-ap-southeast-2
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DependsOn: TranscribeFunction
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt TranscribeFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: 'prefix'
                    Value: 'Source/'
                  - Name: 'suffix'
                    Value: '.mp3'
  PermissionForS3ToInvokeMyLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TranscribeFunction
      Principal: 's3.amazonaws.com'
      SourceArn: !Sub arn:aws:s3:::${BucketName}

  TranscribeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import boto3
          import logging
          
          s3 = boto3.client('s3')
          transcribe = boto3.client('transcribe')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          def lambda_handler(event, context):
            logger.info(event)
            for record in event['Records']:
              source_bucket = record['s3']['bucket']['name']
              key = record['s3']['object']['key']
              object_url = "https://s3.amazonaws.com/{0}/{1}".format(
                  source_bucket, key)
              response = transcribe.start_transcription_job(
                  TranscriptionJobName='MyTranscriptionJob',
                  Media={'MediaFileUri': object_url},
                  MediaFormat='mp3',
                  LanguageCode='en-US'
              )
              print(response)

      Description: Start Transcribe job
      FunctionName: start-transcribe
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 60

  ParseTranscribe:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import logging
          import urllib.request

          BUCKET_NAME = os.environ['BUCKET_NAME']
          s3 = boto3.resource('s3')
          transcribe = boto3.client('transcribe')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          def lambda_handler(event, context):
            logger.info(event)
            job_name = event['detail']['TranscriptionJobName']
            job = transcribe.get_transcription_job(TranscriptionJobName=job_name)
            uri = job['TranscriptionJob']['Transcript']['TranscriptFileUri']
            print(uri)
            content = urllib.request.urlopen(uri).read().decode('UTF-8')
            print(json.dumps(content))
            data = json.loads(content)
            text = data['results']['transcripts'][0]['transcript']
            object = s3.Object(BUCKET_NAME, job_name + '-asrOutput.txt')
            object.put(Body=text)

      Description: Upload transcribe text
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
      FunctionName: parse-transcribe
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 60

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /service-role/
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: S3Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 'S3:DeleteObject'
              Resource: !Sub "arn:aws:s3:::*"  
            - Effect: Allow
              Action: 'transcribe:*'
              Resource: "*"
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - ParseTranscribe
        - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - CloudWatchEventRule
        - Arn
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.transcribe
        detail-type:
          - "Transcribe Job State Change"
        detail:
          TranscriptionJobStatus: 
            - "COMPLETED"
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - ParseTranscribe
          - Arn
        Id: ParseTranscribe